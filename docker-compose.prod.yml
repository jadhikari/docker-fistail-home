version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: production
    container_name: fishtail-backend-prod
    volumes:
      - backend_static:/app/staticfiles
      - backend_media:/app/media
      - backend_logs:/app/logs
    ports:
      - "127.0.0.1:8000:8000"
    env_file: .env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=backend.settings
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "manage.py", "check", "--deploy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - fishtail-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  migrate:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: production
    depends_on:
      postgres:
        condition: service_healthy
    env_file: .env.prod
    command: >
      sh -c "
        python manage.py makemigrations &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput
      "
    networks:
      - fishtail-network
    profiles:
      - migrate

  postgres:
    image: postgres:15-alpine
    container_name: fishtail-postgres-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:5432:5432"
    env_file: .env.prod
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./config/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fishtail} -d ${POSTGRES_DB:-fishtaildb}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fishtail-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: fishtail-redis-prod
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - fishtail-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: nginx:1.25-alpine
    container_name: fishtail-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt/live:/etc/letsencrypt/live:ro
      - /etc/letsencrypt/archive:/etc/letsencrypt/archive:ro
      - /etc/letsencrypt/keys:/etc/letsencrypt/keys:ro
      - /etc/letsencrypt/renewal:/etc/letsencrypt/renewal:ro
      - backend_static:/app/staticfiles:ro
      - backend_media:/app/media:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fishtail-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  certbot:
    image: certbot/certbot:latest
    container_name: fishtail-certbot-prod
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/lib/letsencrypt:/var/lib/letsencrypt
      - ./nginx/certbot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
    profiles:
      - ssl
    networks:
      - fishtail-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_static:
    driver: local
  backend_media:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  fishtail-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
